#!/usr/bin/env node
/**
 * iconimp: PNG to FavIcon, Mac ICNS, Windows ICO and Web-Clip builder
 *
 * Node Version of IconImp based on the initial Bash version of the app
 *
 * @author   RuneImp <runeimp@gmail.com>
 * @version  0.0.1
 * @license  http://opensource.org/licenses/MIT
 */
/**
 * Usage:
 * ------
 * iconimp my-icon # Creates a FavIcon, Mac ICNS, Windows ICO and Web-Clips using the base input/file name "my-icon"
 * iconimp -f optimal 'my fav icon' # Creates a browser favicon.ico based on Microsoft's suggested optimal settings. 16x16, 24x24, 32x32, 64x64.
 * iconimp -f recommended # Creates a browser favicon.ico based on Microsoft's recommended settings. 16x16, 32x32, 48x48.
 * iconimp -fw 'my fav icon' # Creates a browser favicon.ico and a Windows "my fav icon.ico"
 * iconimp -s -f+96x96 # Creates Smartphone Web-Clips and a browser favicon.ico with default sizes plus 96x96. 16x16, 24x24, 32x32, 48x48, 64x64, 96x96.
 */
/**
 * Installation
 * ------------
 * 1. iconimp must be in your path and executable.
 * 2. iconimp*.gif must be in the same directory as iconimp (for now)
 */
/**
 * Error Codes:
 * ------------
 *  1 = No input basename provided
 *  2 = No arguments supplied
 *  3 = Bad argument supplied
 *  4 = Functionality not supported on this OS
 */
/**
 * ChangeLog:
 * ----------
 *	2014-01-01	v0.0.1      Initial Node version of the script
 */ 
/**
 * ToDo:
 * -----
 * [ ] Optimize code reuse and logic.
 * [ ] Add resizing of source images to makeup missing icon sizes for FavIcon, ICO and ICNS.
 * [ ] Add support for sips. Though it does not yet support multi-image ICO format creation to my knowledge.
 * [ ] Add support for GraphicsMagick. Though it does not yet support ICO format creation.
 * [ ] Create .iconimp config parser
 */

var program = require('commander'),
	config = require('commander-config'),
	fs = require('fs'),
	gm = require('gm'),
	os = require('os'),
	path = require('path'),
	util = require('util');

/**
 * GLOBAL VARIABLES
 */

var attach_icon = false,
	base_path = false,
	build_favicon = false,
	build_icns = false,
	build_favicon = false,
	colormap_path = path.dirname(process.argv[1]),
	cwd = process.cwd(),
	debug = false,
	dirname = path.basename(cwd),
	favicon_sizes, 
	file, files,
	// has_graphicsmagick = `which gm`,       // GraphicsMagick > http://www.graphicsmagick.org/
	// has_iconutil = `which iconutil`,       // OS X CLI Dev Tools > OS X Lion or newer. May need Xcode installed.
	// has_im_convert = `which convert`,      // ImageMagick > http://www.imagemagick.org/
	// has_im_identify = `which identify`,    // ImageMagick > http://www.imagemagick.org/script/binary-releases.php
	// has_makeicns = `which makeicns`,       // makeicns > http://www.amnoid.de/icns/makeicns.html
	// has_pic2icns = `which pic2icns`,       // osxiconutils > http://sveinbjorn.org/osxiconutils
	// has_png2icns = `which png2icns`,       // libicns > http://icns.sourceforge.net/
	// has_seticon = `which seticon`,         // osxutils or osxiconutils > http://osxutils.sourceforge.net/
	// has_sips = `which sips`,               // OS X SIPS (scriptable image processing system) Note: Should always be present on a Mac.
	// has_tiff2icns = `which tiff2icns`,     // OS X TIFF to ICNS conversion utility. Note: Should always be present on a Mac.
	// has_tiffutil = `which tiffutil`,       // OS X TIFF Utility, for creating multi-page TIFFs. Note: Should always be present on a Mac.
	i = 0, ico_sizes, icns_sizes,
	input_name = false,
	is_array = false,
	keep_set_dir = false,
	output_name = false,
	make_favicon = false,
	make_icns = false,
	make_ico = false,
	make_icon = false,
	make_webclip = false,
	msg = "",
	re_size = "[^0-9]* ([0-9]+x[0-9]+).*",
	ref_images, ref_match,
	src_dir = "_src",
	test, type,
	webclip_sizes;

function list(val){
	return val.split(',');
}

program
	.version('0.0.1')
	.option('-f, --favicon <sizes>', 'FavIcon ICO creation flag and size modifications', list)
	.option('-i, --input-basename <basename>', 'input file basename')
	.option('-k, --keep-dirs', 'Keep icon set directories')
	.option('-m, --icns <sizes>', 'Mac ICNS creation flag and size modifications', list)
	.option('-o, --output-basename', 'output file basename')
	.option('-s, --webclip <sizes>', 'Smartphone Web-Clip creation flag and size modifications', list)
	.option('-w, --ico <sizes>', 'Windows ICO creation flag and size modifications', list)
	// .option('-_, --____', '____')
	// .option('-_, --____', '____')
	.parse(process.argv);

// Make sure we have an input basename //
if(typeof program.inputBasename === 'undefined'){
	if(program.args.length > 0){
		program.inputBasename = program.args.shift();
	}else{
		// Error 1 if no basename supplied at all //
		program.outputHelp();
		process.exit(1);
	}
}

// for(test in program){
// 	type = typeof program[test];
// 	if(type === 'object' && util.isArray(program[test])){
// 		type = 'array';
// 	}
	
// 	// console.log('  - program.'+test+' ('+type+') :: is_array:', is_array);
// 	if(type !== 'undefined' && type !== 'function' && type !== 'object'){
// 		if(type !== 'array' || program[test].length > 0){
// 			console.log('  - program.'+test+': %s', program[test]);
// 		}
// 	}
// }
// console.log('  - program.args: %s (%j)', program.args, program.args.length);

os_type = os.type();
if(os_type.match(/darwin/i))
	os_type = 'mac';
else if(os_type.match(/msys/i) || os_type.match(/cygwin/i))
	os_type = 'windows';
else if(os_type.match(/linux/i))
	os_type = 'linux'

// console.log('  os_type:', os_type);

favicon_sizes = ['16x16', '24x24', '32x32', '48x48', '64x64'];
icns_sizes = ['16x16', '32x32', '64x64', '128x128', '256x256', '512x512', '1024x1024'];
ico_sizes = ['16x16', '24x24', '32x32', '48x48', '256x256', '16x16_8bit', '48x48_8bit', '32x32_8bit', '24x24_8bit', '32x32_4bit', '24x24_4bit', '16x16_4bit'];
webclip_sizes = ['57x57', '72x72', '114x114', '120x120', '144x144'];

files = fs.readdirSync(cwd);
ref_images = [];
ref_match = new RegExp('^'+program.inputBasename+'.+', 'i');

for(i in files){
	file = files[i];
	if(file.match(ref_match)){
		// console.log(' file:', file);
		ref_images.push(file);
	}
}
for(i in ref_images){
	file = ref_images[i];
	// console.log('  - ref_images['+i+']: %s', file);
	msg = util.format('  - ref_images['+i+']: %s\n', file);
	// gm(file).identify(function (err, data) {
	// 	if (err) {
	// 		console.warn(err);
	// 	}else{
	// 		console.log('data.format:', data.format);
	// 		console.log('data.Geometry:', data.Geometry);
	// 		console.log('data.size:', data.size);
	// 	}
	// });
	gm(file).size(function (err, data) {
		if (err) {
			console.warn(err);
		}else{
			// console.log('size:', data);
			msg += util.format('size: %s\n', data);
		}
	});
	gm(file).format(function (err, data) {
		if (err) {
			console.warn(err);
		}else{
			// console.log('format:', data);
			msg += util.format('format: %s\n', data);
		}
	});
	gm(file).depth(function (err, data) {
		if (err) {
			console.warn(err);
		}else{
			// console.log('depth:', data);
			msg += util.format('depth: %s\n', data);
		}
	});
	gm(file).filesize(function (err, data) {
		if (err) {
			console.warn(err);
		}else{
			// console.log('filesize:', data);
			msg += util.format('filesize: %s\n', data);
		}
	});
	console.log(msg);
}

var FavIcon = (function FavIcon(){
	function constructor(){
		//
	}
})()